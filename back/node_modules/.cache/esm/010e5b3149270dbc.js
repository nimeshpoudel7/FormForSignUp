let Signup,hashPassword,comparePassword;_492‍.x([["signup",()=>signup],["login",()=>login]]);_492‍.w("../model/user",[["default",["Signup"],function(v){Signup=v}]]);_492‍.w("../utils/auth",[["hashPassword",["hashPassword"],function(v){hashPassword=v}],["comparePassword",["comparePassword"],function(v){comparePassword=v}]]);


       const signup=async(req,res)=>{
    _492‍.g.console.log(req.body)
    const {name, username, password, email}=req.body;
    
    if(!name) return res.status(400).send("Name is empty")
    if(!username) return res.status(400).send("Username is empty")
    if(!password) return res.status(400).send("Password is empty")
    if(!email) return res.status(400).send("Email is empty")
     
    let emailExist = await Signup.findOne({
        email

    }).exec()

    if(emailExist) return res.status(400).send("User already exist")
    
    const hashedPassword = await hashPassword(password)

    const userData=new Signup({
        name, 
        username, 
        password:hashedPassword, 
        email
    })
    await userData.save()
    return res.json({Message:"Sign in successful"})
}

       const login=async(req,res)=>{
    const {email, password}=req.body;
    //email xaina vane user not found vannu paro............
    const user = await Signup.findOne({
        email
    }).exec()
    _492‍.g.console.log(user)
     
    // const matched = await comparePassword(password,user.password)
    // //console.log(matched) //message aaaunu paro
    // if(matched) return res.json({Message:"Login Successful"})

       if(!user) return res.status(400).send("User not found")

        if (user){
            const matched = await comparePassword(password,user.password)
            //console.log(matched) //message aaaunu paro
            if(matched) {
                // return res.status(200).send("Login Successful")
                return res.status(200).render(index)
            }
                return res.status(400).send("Wrong Password")
                
        }
}
